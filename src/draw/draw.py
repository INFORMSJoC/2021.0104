#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Time    : 2021/11/25 9:10
# @Author  : Jack Zhao
# @Site    : 
# @File    : draw.py
# @Software: PyCharm

# #Desc:这个专门用来画图
import matplotlib.pyplot as plt
#
# def plot_grad(x,y,name,color):
#     plt.plot(x, y, '--', color='{}'.format(color), linewidth=1.5, marker='^', label='{}'.format(name))
#     plt.xlabel(u'Gradient Selection', fontdict={'family': 'Times New Roman',
#                                                 'color': 'black',
#                                                 'weight': 'normal',
#                                                 'size': 13})
#     plt.ylabel(u'AUC Value', fontdict={'family': 'Times New Roman',
#                                        'fontstyle': 'italic',
#                                        'color': 'black',
#                                        'weight': 'normal',
#                                        'size': 13})
#     plt.legend()
#     plt.savefig('./img/{}.pdf'.format(name), dpi=600, format='pdf')


def plot(x,y_dict,name):
    fig = plt.figure(figsize=(7,5))
    fontdict ={'family': 'Times New Roman',
               'style':'italic',
                                      'color': 'black',
                                      'weight': 'normal',
                                      'size': 20}
    plt.title(name,fontdict=fontdict)
    plt.xlabel(u'T Value', fontdict)
    ax1 = fig.add_subplot(111)
    ax1.set_ylabel('Value', fontdict)


    ax1.plot(x, y_dict['AUC'], '--', linewidth=1.5,color='g', marker='^', label='{}'.format("AUC"))
    ax1.plot(x, y_dict['Gmeans'], '--', linewidth=1.5,color='b', marker='^', label='{}'.format("G-mean"))
    plt.legend(fontsize=13,loc='center left')

    ax2 = ax1.twinx()
    ax2.set_ylabel('Value', fontdict)

    ax2.plot(x, y_dict['Pos_F1'], '--', linewidth=1.5,color='r', marker='^', label='{}'.format("Pos_F1"))

    plt.legend(fontsize=13,loc='center right')
    plt.savefig('./img/{}.pdf'.format(name), dpi=600, format='pdf')


def plot_3D(dic,name):
    # 定义坐标轴
    fig = plt.figure(figsize=(10,10))
    font_dict = {'family': 'Times New Roman',
                                     'color': 'black',
                                     'weight': 'normal',
                                     'size': 30}
    ax = plt.axes(projection='3d')
    ax.scatter(dic["age_maj"],dic["year_maj"],dic["nodes_maj"],color='r',s=300,alpha=0.5,label="Maj Class",marker='o')
    ax.scatter(dic["age_min"],dic["year_min"],dic["nodes_min"],color='b',s=300,alpha=0.5,label="Min Class",marker='^')
    ax.set_zlabel('Nodes',font_dict)  # 坐标轴
    ax.set_ylabel('Year',font_dict)
    ax.set_xlabel('Age',font_dict)
    plt.legend(fontsize=30, loc='best')
    plt.savefig('./img/{}.pdf'.format(name), dpi=600, format='pdf')

def plot_3D_hard(dic,name):
    # 定义坐标轴
    fig = plt.figure(figsize=(10,10))
    font_dict = {'family': 'Times New Roman',
                                     'color': 'black',
                                     'weight': 'normal',
                                     'size': 30}
    ax = plt.axes(projection='3d')
    ax.scatter(dic["emin"][0],dic["emin"][1],dic["emin"][2],color='b',s=300,alpha=0.5,label="Example of Min Class",marker='^')
    ax.scatter(dic["emaj"][0],dic["emaj"][1],dic["emaj"][2],color='r',s=300,alpha=0.5,label="Example of Maj Class",marker='o')
    ax.scatter(dic["hmin"][0], dic["hmin"][1], dic["hmin"][2], color='dodgerblue', s=300, alpha=0.8,
               label="Hardest Example of Min Class", marker='d')
    ax.scatter(dic["hmaj"][0], dic["hmaj"][1], dic["hmaj"][2], color='rosybrown', s=300, alpha=0.8,
               label="Hardest Example of Maj Class", marker='s')

    ax.set_zlabel('Nodes',font_dict)  # 坐标轴
    ax.set_ylabel('Year',font_dict)
    ax.set_xlabel('Age',font_dict)
    plt.legend(fontsize=20, loc='best')
    # plt.show() # 有show不能保存
    plt.savefig('./img/{}.pdf'.format(name), dpi=600, format='pdf')



if __name__ == '__main__':
    # 先绘制超参数gradient的图,需要一个个生成
    aba = [0,2, 4,5, 6,7, 8,9, 10]
    grad_aba = {'AUC': [0.7965,0.7960,0.7949,0.7953,0.7951,0.7953,0.7938,0.7954,0.7953],
                'Pos_F1': [0.3672,0.3672,0.3658,0.3672,0.3668,0.3664,0.3654,0.3666,0.3672],
                'Gmeans': [0.7873,0.7878,0.7867,0.7872,0.7871,0.7871,0.7858,0.7872,0.7872]}

    let = [0,3,6,9,12,15,18,21,24]
    grad_let = {'AUC':[0.9622,0.9620,0.9621,0.9616,0.9615,0.9620,0.9618,0.9613,0.9618],
                'Pos_F1':[0.6846,0.6808,0.6846,0.6798,0.6804,0.6822,0.6828,0.6770,0.6828],
                'Gmeans':[0.9623,0.9620,0.9621,0.9616,0.9615,0.9620,0.9618,0.9612,0.9618]}

    # 下面是T的检验
    T = list(range(7,25,2))
    T_aba = {'AUC':[0.7939,0.7941,0.7944,0.7944,0.7960,0.7957,0.7951,0.7955,0.7953],
              'Pos_F1':[0.3654,0.3658,0.3658,0.3664,0.3674,0.3664,0.3666,0.367,0.3674],
              'Gmeans':[0.7859,0.7860,0.7862,0.7864,0.7878,0.7874,0.7869,0.7874,0.7873]}

    T_let = {'AUC':[0.9611,0.9610,0.9614,0.9620,0.9616,0.9615,0.9618,0.961538,0.962004],
             'Pos_F1':[0.6726,0.6744,0.677,0.677,0.6796,0.6798,0.6814,0.6796,0.6806],
             'Gmeans':[0.9611,0.9610,0.9613,0.9620,0.9615,0.9615,0.9617,0.9615,0.9619]}


    # plot(T,T_aba,"Abalone_T")
    # plot(T,T_let,"Letter_T")
    # plot(aba,grad_aba,"Abalone_G")
    # plot(let,grad_let,"Letter_G")



    # 下面重新绘制harbman的图
    # dic_harb = {"age_maj":[47, 30, 36, 59, 42, 57, 41, 49, 46, 39, 52, 42, 50, 52, 60, 59, 38, 58, 63, 70, 61, 50, 54, 76, 34, 39, 50, 41, 51, 58, 53, 65, 40, 33, 40, 62, 49, 49, 70, 64, 53, 43, 56, 63, 56, 62, 31, 54, 54, 43, 39, 42, 30, 58, 44, 61, 58, 35, 38, 45, 54, 64, 63, 68, 50, 43, 55, 62, 45, 55, 65, 67, 38, 59, 50, 52, 50, 45, 48, 42, 60, 44, 37, 71, 43, 60, 37, 55, 55, 49, 57, 73, 30, 56, 61, 69, 36, 44, 57, 55, 63, 70, 75, 55, 42, 72, 38, 34, 67, 57, 38, 37, 59, 67, 37, 63, 64, 47, 33, 41, 57, 69, 58, 34, 54, 66, 44, 57, 63, 31, 69, 37, 67, 48, 47, 41, 52, 43, 39, 49, 47, 41, 52, 64, 38, 50, 68, 58, 73, 47, 47, 63, 52, 45, 55, 66, 42, 43, 77, 64, 38, 62, 35, 54, 55, 51, 54, 50, 66, 52, 60, 38, 34, 54, 53, 45, 52, 50, 59, 65, 39, 49, 53, 54, 51, 59, 41, 58, 52, 57, 56, 40, 43, 47, 70, 65, 65, 72, 46, 49, 72, 47, 57, 59, 49, 61, 70, 52, 50, 48, 37, 34, 38, 56, 46, 74, 41, 42, 48, 61, 45, 53, 51, 61, 65],
    # "year_maj":[66, 64, 60, 64, 61, 64, 59, 62, 58, 63, 68, 63, 59, 62, 61, 64, 60, 67, 61, 66, 65, 64, 63, 67, 60, 59, 66, 69, 65, 58, 60, 67, 65, 58, 58, 66, 61, 63, 68, 65, 61, 66, 67, 62, 60, 58, 65, 60, 58, 60, 58, 58, 62, 60, 61, 59, 61, 63, 67, 59, 59, 68, 63, 68, 61, 64, 67, 66, 68, 69, 67, 61, 66, 60, 65, 61, 61, 67, 66, 62, 67, 61, 58, 68, 63, 61, 63, 58, 66, 67, 67, 68, 65, 60, 59, 66, 69, 63, 64, 66, 63, 63, 62, 69, 65, 67, 60, 67, 66, 64, 66, 60, 64, 66, 60, 61, 61, 67, 60, 65, 69, 60, 58, 58, 69, 68, 67, 62, 61, 59, 65, 59, 65, 64, 63, 59, 60, 63, 63, 62, 61, 65, 64, 66, 60, 58, 67, 59, 62, 66, 60, 66, 60, 60, 58, 58, 59, 64, 65, 58, 64, 62, 64, 62, 58, 59, 67, 63, 58, 62, 64, 59, 60, 66, 63, 67, 69, 59, 63, 64, 67, 61, 60, 62, 66, 64, 64, 61, 63, 61, 66, 58, 65, 58, 67, 58, 64, 64, 62, 60, 58, 68, 63, 67, 66, 59, 59, 65, 61, 62, 63, 61, 62, 66, 63, 63, 58, 60, 61, 64, 64, 58, 64, 68, 59],
    # "nodes_maj":[12, 1, 1, 7, 4, 0, 0, 0, 3, 0, 0, 1, 0, 1, 1, 0, 0, 0, 9, 14, 8, 0, 19, 0, 0, 2, 1, 8, 0, 0, 2, 1, 0, 10, 0, 0, 0, 3, 0, 22, 1, 4, 0, 0, 0, 0, 4, 3, 1, 0, 0, 0, 3, 3, 0, 0, 1, 0, 5, 14, 7, 0, 0, 0, 6, 3, 1, 0, 0, 3, 0, 0, 11, 0, 4, 0, 0, 1, 0, 20, 2, 0, 0, 2, 2, 25, 0, 0, 18, 1, 0, 0, 0, 0, 0, 0, 0, 1, 9, 0, 0, 0, 1, 22, 0, 3, 1, 7, 0, 0, 0, 0, 1, 0, 15, 28, 0, 0, 0, 0, 0, 0, 3, 30, 7, 0, 16, 0, 0, 2, 0, 6, 0, 0, 6, 8, 4, 14, 4, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 5, 0, 1, 1, 2, 2, 3, 0, 1, 6, 13, 0, 1, 1, 46, 1, 0, 0, 0, 2, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 0, 1, 4, 0, 2, 4, 0, 1, 2, 0, 3, 0, 0, 0, 0, 0, 1, 0, 4, 0, 3, 0, 0, 8, 0, 0, 2, 0, 10, 3, 2, 0, 0, 0, 1, 8, 0, 0, 1, 7, 0, 2],
    # "age_min":[65, 47, 67, 62, 62, 61, 45, 41, 60, 53, 74, 41, 52, 72, 70, 55, 53, 46, 52, 46, 44, 67, 34, 65, 59, 56, 49, 50, 47, 66, 56, 43, 62, 70, 54, 51, 38, 65, 57, 42, 43, 48, 45, 41, 42, 43, 54, 45, 53, 44, 34, 46, 44, 66, 53, 51, 63, 61, 61, 48, 78, 50, 69, 52, 48, 57, 55, 60, 54, 65, 54, 39, 52, 46, 57, 49, 83, 43, 53, 47, 53],
    # "year_min":[66, 65, 63, 65, 58, 68, 66, 64, 65, 60, 65, 60, 66, 63, 58, 68, 65, 65, 62, 62, 63, 64, 59, 58, 62, 66, 64, 63, 62, 61, 65, 64, 59, 58, 65, 59, 69, 62, 62, 69, 64, 67, 67, 67, 59, 59, 60, 65, 63, 64, 66, 58, 58, 58, 65, 59, 60, 65, 62, 58, 65, 64, 67, 59, 58, 64, 63, 59, 68, 61, 65, 66, 69, 69, 61, 63, 58, 58, 58, 63, 59],
    # "nodes_min":[15, 0, 1, 19, 0, 1, 0, 0, 0, 9, 3, 23, 4, 0, 4, 15, 1, 20, 3, 5, 19, 8, 0, 0, 35, 3, 10, 13, 0, 13, 9, 0, 13, 0, 5, 13, 21, 22, 14, 1, 0, 7, 1, 0, 0, 2, 11, 6, 24, 6, 9, 2, 9, 0, 12, 3, 1, 0, 5, 11, 1, 0, 8, 2, 11, 1, 6, 17, 7, 2, 23, 0, 3, 3, 5, 0, 2, 52, 4, 23, 3]
    # }
    # # plot_3D(dic_harb,"Distribution")
    # # harbman hardest,这是图2
    # age_emin,year_emin,nodes_emin = [65, 47, 62, 62, 45, 41, 53, 74, 41, 52, 72, 70, 55, 53, 46, 52, 46, 44, 67, 65, 59, 56, 49, 50, 47, 66, 56, 43, 62, 70, 54, 51, 38, 65, 57, 42, 43, 48, 45, 41, 42, 43, 54, 45, 53, 44, 34, 46, 44, 66, 53, 51, 61, 48, 78, 50, 69, 52, 48, 55, 60, 54, 65, 54, 52, 46, 57, 83, 43, 53, 47, 53],[66, 65, 65, 58, 66, 64, 60, 65, 60, 66, 63, 58, 68, 65, 65, 62, 62, 63, 64, 58, 62, 66, 64, 63, 62, 61, 65, 64, 59, 58, 65, 59, 69, 62, 62, 69, 64, 67, 67, 67, 59, 59, 60, 65, 63, 64, 66, 58, 58, 58, 65, 59, 62, 58, 65, 64, 67, 59, 58, 63, 59, 68, 61, 65, 69, 69, 61, 58, 58, 58, 63, 59],[15, 0, 19, 0, 0, 0, 9, 3, 23, 4, 0, 4, 15, 1, 20, 3, 5, 19, 8, 0, 35, 3, 10, 13, 0, 13, 9, 0, 13, 0, 5, 13, 21, 22, 14, 1, 0, 7, 1, 0, 0, 2, 11, 6, 24, 6, 9, 2, 9, 0, 12, 3, 5, 11, 1, 0, 8, 2, 11, 6, 17, 7, 2, 23, 3, 3, 5, 2, 52, 4, 23, 3]
    # age_emaj,year_emaj,nodes_emaj = [30, 36, 59, 42, 57, 41, 49, 46, 39, 52, 42, 50, 60, 59, 38, 58, 61, 50, 54, 76, 34, 39, 50, 41, 51, 58, 53, 65, 40, 33, 40, 62, 49, 70, 53, 43, 56, 63, 56, 62, 31, 54, 54, 43, 39, 42, 30, 58, 44, 61, 58, 35, 38, 54, 64, 63, 68, 50, 43, 55, 62, 45, 55, 65, 67, 38, 59, 50, 52, 50, 45, 48, 60, 44, 37, 71, 43, 60, 37, 55, 55, 49, 57, 73, 30, 56, 61, 69, 36, 44, 55, 63, 70, 75, 55, 42, 72, 38, 34, 67, 57, 38, 37, 59, 67, 37, 64, 47, 33, 41, 57, 69, 58, 34, 54, 66, 57, 63, 31, 69, 37, 67, 48, 47, 41, 52, 39, 49, 47, 41, 52, 64, 38, 50, 68, 58, 73, 47, 47, 63, 52, 45, 55, 66, 42, 43, 77, 64, 38, 62, 35, 54, 55, 51, 54, 50, 66, 52, 60, 38, 34, 54, 53, 45, 52, 50, 59, 65, 39, 49, 53, 54, 51, 59, 41, 58, 52, 57, 56, 43, 47, 70, 65, 65, 72, 46, 49, 72, 47, 57, 59, 49, 61, 48, 37, 34, 38, 56, 46, 74, 41, 42, 48, 45, 53, 51, 61],[64, 60, 64, 61, 64, 59, 62, 58, 63, 68, 63, 59, 61, 64, 60, 67, 65, 64, 63, 67, 60, 59, 66, 69, 65, 58, 60, 67, 65, 58, 58, 66, 63, 68, 61, 66, 67, 62, 60, 58, 65, 60, 58, 60, 58, 58, 62, 60, 61, 59, 61, 63, 67, 59, 68, 63, 68, 61, 64, 67, 66, 68, 69, 67, 61, 66, 60, 65, 61, 61, 67, 66, 67, 61, 58, 68, 63, 61, 63, 58, 66, 67, 67, 68, 65, 60, 59, 66, 69, 63, 66, 63, 63, 62, 69, 65, 67, 60, 67, 66, 64, 66, 60, 64, 66, 60, 61, 67, 60, 65, 69, 60, 58, 58, 69, 68, 62, 61, 59, 65, 59, 65, 64, 63, 59, 60, 63, 62, 61, 65, 64, 66, 60, 58, 67, 59, 62, 66, 60, 66, 60, 60, 58, 58, 59, 64, 65, 58, 64, 62, 64, 62, 58, 59, 67, 63, 58, 62, 64, 59, 60, 66, 63, 67, 69, 59, 63, 64, 67, 61, 60, 62, 66, 64, 64, 61, 63, 61, 66, 65, 58, 67, 58, 64, 64, 62, 60, 58, 68, 63, 67, 66, 59, 62, 63, 61, 62, 66, 63, 63, 58, 60, 61, 64, 58, 64, 68],[1, 1, 7, 4, 0, 0, 0, 3, 0, 0, 1, 0, 1, 0, 0, 0, 8, 0, 19, 0, 0, 2, 1, 8, 0, 0, 2, 1, 0, 10, 0, 0, 3, 0, 1, 4, 0, 0, 0, 0, 4, 3, 1, 0, 0, 0, 3, 3, 0, 0, 1, 0, 5, 7, 0, 0, 0, 6, 3, 1, 0, 0, 3, 0, 0, 11, 0, 4, 0, 0, 1, 0, 2, 0, 0, 2, 2, 25, 0, 0, 18, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 22, 0, 3, 1, 7, 0, 0, 0, 0, 1, 0, 15, 0, 0, 0, 0, 0, 0, 3, 30, 7, 0, 0, 0, 2, 0, 6, 0, 0, 6, 8, 4, 4, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 5, 0, 1, 1, 2, 2, 3, 0, 1, 6, 13, 0, 1, 1, 46, 1, 0, 0, 0, 2, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 0, 1, 4, 0, 2, 4, 0, 1, 0, 3, 0, 0, 0, 0, 0, 1, 0, 4, 0, 3, 0, 0, 2, 0, 10, 3, 2, 0, 0, 0, 1, 8, 0, 1, 7, 0]
    # age_hmin,year_hmin,nodes_hmin = [61,60,34,63,61,57,39],[68,65 ,59, 60 ,65 ,64, 66],[1 ,0 ,0 ,1 ,0 ,1 ,0]
    # age_hmaj, year_hmaj, nodes_hmaj = [47, 63, 70, 64, 45, 42, 57, 63, 44, 43, 70, 65],[66, 61, 66, 65, 59, 62, 64, 61, 67, 63, 59, 59],[12, 9, 14, 22, 14, 20, 9, 28, 16, 14, 8, 2]
    # dic_harb = {"emin":[age_emin,year_emin,nodes_emin],"emaj":[age_emaj,year_emaj,nodes_emaj],
    #             "hmin":[age_hmin,year_hmin,nodes_hmin],"hmaj":[age_hmaj, year_hmaj, nodes_hmaj]}
    # plot_3D_hard(dic_harb,"Hardest")